version: '3.8'

services:
  # PostgreSQL Database (Optional - only if NOT using Supabase cloud)
  # Comment out this entire service if you're using Supabase cloud
  postgres:
    image: postgres:15-alpine
    container_name: cursorrulecraft-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cursorrulecraft}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cursorrulecraft

  # Backend Service (NestJS)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    container_name: cursorrulecraft-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 4000
      HOST: 0.0.0.0

      # Database (only used if NOT using Supabase)
      DATABASE_URL: ${DATABASE_URL}

      # Supabase
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-${SUPABASE_KEY}}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}

      # Clerk Auth
      CLERK_PUBLISHABLE_KEY: ${CLERK_PUBLISHABLE_KEY}
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      CLERK_WEBHOOK_SECRET: ${CLERK_WEBHOOK_SECRET}

      # GitHub App
      GITHUB_APP_ID: ${GITHUB_APP_ID}
      GITHUB_APP_PRIVATE_KEY: ${GITHUB_APP_PRIVATE_KEY}
      GITHUB_APP_PRIVATE_KEY_BASE64: ${GITHUB_APP_PRIVATE_KEY_BASE64}
      GITHUB_APP_CLIENT_ID: ${GITHUB_APP_CLIENT_ID}
      GITHUB_APP_CLIENT_SECRET: ${GITHUB_APP_CLIENT_SECRET}
      GITHUB_APP_WEBHOOK_SECRET: ${GITHUB_APP_WEBHOOK_SECRET}
      GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      GITHUB_REDIRECT_URI: ${GITHUB_REDIRECT_URI:-http://localhost/api/auth/github/callback}

      # CORS
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost}
    # Only depend on postgres if you're using it (comment out if using Supabase cloud)
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    expose:
      - '4000'
    networks:
      - cursorrulecraft
    healthcheck:
      test:
        [
          'CMD',
          'node',
          '-e',
          "require('http').get('http://localhost:4000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Service (React + Vite + Nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
      args:
        VITE_API_URL: ${VITE_API_URL:-/api}
        VITE_CLERK_PUBLISHABLE_KEY: ${VITE_CLERK_PUBLISHABLE_KEY:-${CLERK_PUBLISHABLE_KEY}}
    container_name: cursorrulecraft-frontend
    restart: unless-stopped
    ports:
      - '${APP_PORT:-80}:80'
    depends_on:
      - backend
    networks:
      - cursorrulecraft
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:80/health']
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Combined Service (Frontend + Backend in one container)
  # Use this for Render-like single-service deployment
  # ============================================
  # Uncomment to test combined deployment locally:
  #
  # combined:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     target: combined
  #     args:
  #       VITE_API_URL: /api
  #       VITE_CLERK_PUBLISHABLE_KEY: ${VITE_CLERK_PUBLISHABLE_KEY:-${CLERK_PUBLISHABLE_KEY}}
  #   container_name: cursorrulecraft-combined
  #   restart: unless-stopped
  #   ports:
  #     - '${APP_PORT:-8080}:80'
  #   environment:
  #     NODE_ENV: production
  #     PORT: 4000
  #     HOST: 0.0.0.0
  #     SUPABASE_URL: ${SUPABASE_URL}
  #     SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-${SUPABASE_KEY}}
  #     SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY}
  #     CLERK_PUBLISHABLE_KEY: ${CLERK_PUBLISHABLE_KEY}
  #     CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
  #     CLERK_WEBHOOK_SECRET: ${CLERK_WEBHOOK_SECRET}
  #     GITHUB_APP_ID: ${GITHUB_APP_ID}
  #     GITHUB_APP_PRIVATE_KEY: ${GITHUB_APP_PRIVATE_KEY}
  #     GITHUB_APP_PRIVATE_KEY_BASE64: ${GITHUB_APP_PRIVATE_KEY_BASE64}
  #     GITHUB_APP_CLIENT_ID: ${GITHUB_APP_CLIENT_ID}
  #     GITHUB_APP_CLIENT_SECRET: ${GITHUB_APP_CLIENT_SECRET}
  #     GITHUB_APP_WEBHOOK_SECRET: ${GITHUB_APP_WEBHOOK_SECRET}
  #     GITHUB_CLIENT_ID: ${GITHUB_CLIENT_ID}
  #     GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
  #     GITHUB_REDIRECT_URI: ${GITHUB_REDIRECT_URI:-http://localhost:8080/api/auth/github/callback}
  #     FRONTEND_URL: ${FRONTEND_URL:-http://localhost:8080}
  #   networks:
  #     - cursorrulecraft
  #   healthcheck:
  #     test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:80/health']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  cursorrulecraft:
    driver: bridge
