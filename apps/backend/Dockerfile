# This file is generated by Nx.
# Build the docker image with `npx nx docker:build backend`.
# Tip: Modify "docker:build" options in project.json to change docker build args.
#
# Run the container with `nx docker:run backend -p 4000:4000`.
#
FROM docker.io/node:lts-alpine

# Install curl for health checks (useful for debugging)
RUN apk add --no-cache curl

# Environment variables
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=4000

WORKDIR /app

# Copy the built application from the workspace root dist folder
# The prune task prepares this structure at workspace root
# Docker context is workspace root, so paths are relative to that
COPY dist/apps/backend/dist ./

# Copy shared-types package (needed for module-alias at runtime)
COPY dist/packages/shared-types ./packages/shared-types

# Copy package.json
COPY dist/apps/backend/package.json ./package.json

# Remove workspace: protocol dependency and install production deps
RUN apk add --no-cache jq && \
    jq 'del(.dependencies["@cursorrulecraft/shared-types"])' package.json > package.json.tmp && \
    mv package.json.tmp package.json && \
    npm install --omit=dev && \
    apk del jq

EXPOSE 4000

# Health check - pings the /api/health endpoint
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:4000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

CMD [ "node", "apps/backend/src/main.js" ]
