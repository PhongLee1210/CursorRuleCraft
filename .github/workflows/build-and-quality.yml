name: Build & Quality Check

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

# Cancel in-progress runs on same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [22.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Get Bun cache directory
        id: bun-cache-dir
        run: echo "dir=$(bun pm cache)" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.bun-cache-dir.outputs.dir }}
            node_modules
            apps/*/node_modules
            packages/*/node_modules
            ~/.cache/Cypress
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: |
            .nx/cache
            node_modules/.cache/nx
          key: ${{ runner.os }}-nx-${{ hashFiles('**/bun.lock', 'nx.json', 'package.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nx-${{ hashFiles('**/bun.lock', 'nx.json', 'package.json') }}-
            ${{ runner.os }}-nx-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Format check
        run: bun run format:check
        continue-on-error: false

      - name: Lint
        run: bun run lint
        continue-on-error: false

      - name: Type check
        run: bun run type-check
        continue-on-error: false

      - name: Run tests
        run: bun run test
        continue-on-error: true

      - name: Build all projects
        run: bun run build
        env:
          NODE_ENV: production

      - name: Build backend
        run: bun run build:backend
        env:
          NODE_ENV: production

      - name: Build frontend
        run: bun run build:frontend
        env:
          NODE_ENV: production

      - name: Check build artifacts
        run: |
          echo "Checking backend build artifacts..."
          ls -la apps/backend/dist || echo "Backend dist not found"

          echo "Checking frontend build artifacts..."
          ls -la dist/apps/frontend || echo "Frontend dist not found"

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            apps/backend/dist
            dist/apps/frontend
          retention-days: 7

  # Optional: Run affected projects only for PRs
  affected:
    name: Affected Projects Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Check affected projects
        run: |
          echo "Checking affected projects..."
          bun nx affected --target=build --base=origin/main --head=HEAD
          bun nx affected --target=lint --base=origin/main --head=HEAD
          bun nx affected --target=type-check --base=origin/main --head=HEAD

  # Status check that's required to pass
  status-check:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [build]
    if: always()

    steps:
      - name: Check build status
        run: |
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "Build failed!"
            exit 1
          fi
          echo "All checks passed!"
